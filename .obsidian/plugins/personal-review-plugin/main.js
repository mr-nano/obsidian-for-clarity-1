/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarkAsReviewedPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MarkAsReviewedPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "mark-note-as-reviewed",
      name: "Mark Note as Reviewed",
      callback: () => this.markAsReviewed()
    });
    this.addButton("header");
  }
  async markAsReviewed() {
    var _a, _b, _c;
    console.log("Marking as reviewed");
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    const content = await this.app.vault.read(activeFile);
    const now = new Date();
    const dateStr = now.toLocaleString("en-IN", {
      timeZone: "Asia/Kolkata",
      year: "numeric",
      month: "2-digit",
      day: "2-digit"
    }).replace(/(\d+)\/(\d+)\/(\d+)/, "$3-$2-$1");
    const timeStr = now.toLocaleString("en-IN", {
      timeZone: "Asia/Kolkata",
      hour: "numeric",
      minute: "2-digit",
      hour12: true
    });
    const reviewedLine = `- Reviewed on [[${dateStr}]] at ${timeStr}`;
    const dateHeadingRegex = /^(#+ ?Dates?)$/gm;
    const matches = [...content.matchAll(dateHeadingRegex)];
    let updatedContent;
    if (matches.length > 0) {
      const lastMatch = matches[matches.length - 1];
      const index = (_a = lastMatch == null ? void 0 : lastMatch.index) != null ? _a : content.length;
      updatedContent = content.slice(0, index) + content.slice(index).replace((_b = lastMatch == null ? void 0 : lastMatch[0]) != null ? _b : "", `${(_c = lastMatch == null ? void 0 : lastMatch[0]) != null ? _c : ""}
${reviewedLine}`);
    } else {
      updatedContent = `${content}

## Dates
${reviewedLine}`;
    }
    await this.app.vault.modify(activeFile, updatedContent);
    new import_obsidian.Notice(`Note "${activeFile.name}" marked as reviewed`);
  }
  addButton(location) {
    const button = this.addRibbonIcon("check-circle", "Mark as Reviewed", () => {
      this.markAsReviewed();
    });
    if (location === "header" || location === "footer") {
      this.app.workspace.on("layout-change", () => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (activeView) {
          const containerEl = location === "header" ? activeView.containerEl.querySelector(".view-header") : activeView.containerEl.querySelector(".view-footer");
          if (containerEl && !containerEl.querySelector(".mark-as-reviewed-button")) {
            const newButton = button.cloneNode(true);
            newButton.addClass("mark-as-reviewed-button");
            containerEl.appendChild(newButton);
            newButton.onclick = () => this.markAsReviewed();
          }
        }
      });
    }
  }
  onunload() {
    console.log("Unloading Mark as Reviewed Plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgTWFya2Rvd25WaWV3LCBOb3RpY2UsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXJrQXNSZXZpZXdlZFBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ21hcmstbm90ZS1hcy1yZXZpZXdlZCcsXG5cdFx0XHRuYW1lOiAnTWFyayBOb3RlIGFzIFJldmlld2VkJyxcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB0aGlzLm1hcmtBc1Jldmlld2VkKCksXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGRCdXR0b24oJ2hlYWRlcicpO1xuXHRcdFxuXHR9XG5cblx0YXN5bmMgbWFya0FzUmV2aWV3ZWQoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJNYXJraW5nIGFzIHJldmlld2VkXCIpO1xuXHRcdGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXG5cdFx0aWYgKCFhY3RpdmVGaWxlKSByZXR1cm47XG5cblx0XHRjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChhY3RpdmVGaWxlKTtcblx0XHRjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXHRcdGNvbnN0IGRhdGVTdHIgPSBub3cudG9Mb2NhbGVTdHJpbmcoJ2VuLUlOJywge1xuXHRcdFx0dGltZVpvbmU6ICdBc2lhL0tvbGthdGEnLFxuXHRcdFx0eWVhcjogJ251bWVyaWMnLFxuXHRcdFx0bW9udGg6ICcyLWRpZ2l0Jyxcblx0XHRcdGRheTogJzItZGlnaXQnLFxuXHRcdH0pLnJlcGxhY2UoLyhcXGQrKVxcLyhcXGQrKVxcLyhcXGQrKS8sICckMy0kMi0kMScpO1xuXHRcdGNvbnN0IHRpbWVTdHIgPSBub3cudG9Mb2NhbGVTdHJpbmcoJ2VuLUlOJywge1xuXHRcdFx0dGltZVpvbmU6ICdBc2lhL0tvbGthdGEnLFxuXHRcdFx0aG91cjogJ251bWVyaWMnLFxuXHRcdFx0bWludXRlOiAnMi1kaWdpdCcsXG5cdFx0XHRob3VyMTI6IHRydWVcblx0XHR9KTtcblxuXHRcdGNvbnN0IHJldmlld2VkTGluZSA9IGAtIFJldmlld2VkIG9uIFtbJHtkYXRlU3RyfV1dIGF0ICR7dGltZVN0cn1gO1xuXHRcdGNvbnN0IGRhdGVIZWFkaW5nUmVnZXggPSAvXigjKyA/RGF0ZXM/KSQvZ207XG5cdFx0Y29uc3QgbWF0Y2hlcyA9IFsuLi5jb250ZW50Lm1hdGNoQWxsKGRhdGVIZWFkaW5nUmVnZXgpXTtcblx0XHRcblx0XHRsZXQgdXBkYXRlZENvbnRlbnQ7XG5cdFx0aWYgKG1hdGNoZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0Y29uc3QgbGFzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuXHRcdFx0Y29uc3QgaW5kZXggPSBsYXN0TWF0Y2g/LmluZGV4ID8/IGNvbnRlbnQubGVuZ3RoO1xuXHRcdFx0dXBkYXRlZENvbnRlbnQgPSBjb250ZW50LnNsaWNlKDAsIGluZGV4KSArIFxuXHRcdFx0XHRcdFx0XHRjb250ZW50LnNsaWNlKGluZGV4KS5yZXBsYWNlKGxhc3RNYXRjaD8uWzBdID8/ICcnLCBgJHtsYXN0TWF0Y2g/LlswXSA/PyAnJ31cXG4ke3Jldmlld2VkTGluZX1gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dXBkYXRlZENvbnRlbnQgPSBgJHtjb250ZW50fVxcblxcbiMjIERhdGVzXFxuJHtyZXZpZXdlZExpbmV9YDtcblx0XHR9XG5cblx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5tb2RpZnkoYWN0aXZlRmlsZSwgdXBkYXRlZENvbnRlbnQpO1xuXHRcdG5ldyBOb3RpY2UoYE5vdGUgXCIke2FjdGl2ZUZpbGUubmFtZX1cIiBtYXJrZWQgYXMgcmV2aWV3ZWRgKTtcblxuXHR9XG5cblx0YWRkQnV0dG9uKGxvY2F0aW9uOiBzdHJpbmcpIHtcblx0XHRjb25zdCBidXR0b24gPSB0aGlzLmFkZFJpYmJvbkljb24oJ2NoZWNrLWNpcmNsZScsICdNYXJrIGFzIFJldmlld2VkJywgKCkgPT4ge1xuXHRcdFx0dGhpcy5tYXJrQXNSZXZpZXdlZCgpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gVE9ETyAtIGZvb3RlciBkb2VzIG5vdCB3b3JrLiBUaGUgbG9jYXRpb24gaXMgdGFrZW4gdG8gbWFrZSBpdCBtb3JlIGNvbmZpZ3J1YWJsZSBsYXRlciBvbi4uIGJ1dCBjdXJyZW50bHkgZG9lcyBub3Qgd29ya1xuXHRcdGlmIChsb2NhdGlvbiA9PT0gJ2hlYWRlcicgfHwgbG9jYXRpb24gPT09ICdmb290ZXInKSB7XG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2xheW91dC1jaGFuZ2UnLCAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdFx0XHRpZiAoYWN0aXZlVmlldykge1xuXHRcdFx0XHRcdGNvbnN0IGNvbnRhaW5lckVsID0gbG9jYXRpb24gPT09ICdoZWFkZXInIFxuXHRcdFx0XHRcdFx0PyBhY3RpdmVWaWV3LmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy52aWV3LWhlYWRlcicpIFxuXHRcdFx0XHRcdFx0OiBhY3RpdmVWaWV3LmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy52aWV3LWZvb3RlcicpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmIChjb250YWluZXJFbCAmJiAhY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcignLm1hcmstYXMtcmV2aWV3ZWQtYnV0dG9uJykpIHtcblx0XHRcdFx0XHRcdGNvbnN0IG5ld0J1dHRvbiA9IGJ1dHRvbi5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTEVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRuZXdCdXR0b24uYWRkQ2xhc3MoJ21hcmstYXMtcmV2aWV3ZWQtYnV0dG9uJyk7XG5cdFx0XHRcdFx0XHRjb250YWluZXJFbC5hcHBlbmRDaGlsZChuZXdCdXR0b24pO1xuXHRcdFx0XHRcdFx0bmV3QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0aGlzLm1hcmtBc1Jldmlld2VkKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRvbnVubG9hZCgpIHtcblx0XHRjb25zb2xlLmxvZygnVW5sb2FkaW5nIE1hcmsgYXMgUmV2aWV3ZWQgUGx1Z2luJyk7XG5cdH1cblxuXHRcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQTZDO0FBRzdDLElBQXFCLHVCQUFyQixjQUFrRCx1QkFBTztBQUFBLEVBRXhELE1BQU0sU0FBUztBQUNkLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNLEtBQUssZUFBZTtBQUFBLElBQ3JDLENBQUM7QUFDRCxTQUFLLFVBQVUsUUFBUTtBQUFBLEVBRXhCO0FBQUEsRUFFQSxNQUFNLGlCQUFpQjtBQWZ4QjtBQWdCRSxZQUFRLElBQUkscUJBQXFCO0FBQ2pDLFVBQU0sYUFBYSxLQUFLLElBQUksVUFBVSxjQUFjO0FBRXBELFFBQUksQ0FBQztBQUFZO0FBRWpCLFVBQU0sVUFBVSxNQUFNLEtBQUssSUFBSSxNQUFNLEtBQUssVUFBVTtBQUNwRCxVQUFNLE1BQU0sSUFBSSxLQUFLO0FBQ3JCLFVBQU0sVUFBVSxJQUFJLGVBQWUsU0FBUztBQUFBLE1BQzNDLFVBQVU7QUFBQSxNQUNWLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLEtBQUs7QUFBQSxJQUNOLENBQUMsRUFBRSxRQUFRLHVCQUF1QixVQUFVO0FBQzVDLFVBQU0sVUFBVSxJQUFJLGVBQWUsU0FBUztBQUFBLE1BQzNDLFVBQVU7QUFBQSxNQUNWLE1BQU07QUFBQSxNQUNOLFFBQVE7QUFBQSxNQUNSLFFBQVE7QUFBQSxJQUNULENBQUM7QUFFRCxVQUFNLGVBQWUsbUJBQW1CLGdCQUFnQjtBQUN4RCxVQUFNLG1CQUFtQjtBQUN6QixVQUFNLFVBQVUsQ0FBQyxHQUFHLFFBQVEsU0FBUyxnQkFBZ0IsQ0FBQztBQUV0RCxRQUFJO0FBQ0osUUFBSSxRQUFRLFNBQVMsR0FBRztBQUN2QixZQUFNLFlBQVksUUFBUSxRQUFRLFNBQVMsQ0FBQztBQUM1QyxZQUFNLFNBQVEsNENBQVcsVUFBWCxZQUFvQixRQUFRO0FBQzFDLHVCQUFpQixRQUFRLE1BQU0sR0FBRyxLQUFLLElBQ25DLFFBQVEsTUFBTSxLQUFLLEVBQUUsU0FBUSw0Q0FBWSxPQUFaLFlBQWtCLElBQUksSUFBRyw0Q0FBWSxPQUFaLFlBQWtCO0FBQUEsRUFBTyxjQUFjO0FBQUEsSUFDbEcsT0FBTztBQUNOLHVCQUFpQixHQUFHO0FBQUE7QUFBQTtBQUFBLEVBQXdCO0FBQUEsSUFDN0M7QUFFQSxVQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sWUFBWSxjQUFjO0FBQ3RELFFBQUksdUJBQU8sU0FBUyxXQUFXLDBCQUEwQjtBQUFBLEVBRTFEO0FBQUEsRUFFQSxVQUFVLFVBQWtCO0FBQzNCLFVBQU0sU0FBUyxLQUFLLGNBQWMsZ0JBQWdCLG9CQUFvQixNQUFNO0FBQzNFLFdBQUssZUFBZTtBQUFBLElBQ3JCLENBQUM7QUFHRCxRQUFJLGFBQWEsWUFBWSxhQUFhLFVBQVU7QUFDbkQsV0FBSyxJQUFJLFVBQVUsR0FBRyxpQkFBaUIsTUFBTTtBQUM1QyxjQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsb0JBQW9CLDRCQUFZO0FBQ3RFLFlBQUksWUFBWTtBQUNmLGdCQUFNLGNBQWMsYUFBYSxXQUM5QixXQUFXLFlBQVksY0FBYyxjQUFjLElBQ25ELFdBQVcsWUFBWSxjQUFjLGNBQWM7QUFFdEQsY0FBSSxlQUFlLENBQUMsWUFBWSxjQUFjLDBCQUEwQixHQUFHO0FBQzFFLGtCQUFNLFlBQVksT0FBTyxVQUFVLElBQUk7QUFDdkMsc0JBQVUsU0FBUyx5QkFBeUI7QUFDNUMsd0JBQVksWUFBWSxTQUFTO0FBQ2pDLHNCQUFVLFVBQVUsTUFBTSxLQUFLLGVBQWU7QUFBQSxVQUMvQztBQUFBLFFBQ0Q7QUFBQSxNQUNELENBQUM7QUFBQSxJQUNGO0FBQUEsRUFDRDtBQUFBLEVBRUEsV0FBVztBQUNWLFlBQVEsSUFBSSxtQ0FBbUM7QUFBQSxFQUNoRDtBQUdEOyIsCiAgIm5hbWVzIjogW10KfQo=
